@page "/edit/{BcitId}"
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<h1>Editing Student @BcitId</h1>

<p>Edit a student from a list of students</p>

@if (students != null && studentFound) // Update
{
    <EditForm Model="@student" OnValidSubmit="@HandleUpdate">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputText placeholder="First Name" id="firstName" @bind-Value="@student.FirstName" />
        <br />
        <InputText placeholder="Last Name" id="lastName" @bind-Value="@student.LastName" />
        <br />
        <InputText placeholder="Mobile Number" id="mobileNumber" @bind-Value="@student.MobileNumber" />
        <br />
        <InputText placeholder="Email Address" id="emailAddress" @bind-Value="@student.EmailAddress" />
        <br />
        <InputText placeholder="City Of Residence" id="cityOfResidence" @bind-Value="@student.CityOfResidence" />
        <br />
        <InputText placeholder="Specialization" id="specialization" @bind-Value="@student.Specialization" />
        <br />
        <button type="submit" class="btn btn-success">Update</button>
        <a href="/students">
            <button value="Back" class="btn btn-secondary">Cancel</button>
        </a>

        @code {
        private Student student = new Student();

        private async void HandleUpdate()
        {
            string endpoint = $"{baseUrl}api/students/{student.BcitId}";

            await httpClient.PutAsJsonAsync(endpoint, student);

            await load();
            StateHasChanged(); // causes the page to get automatically refreshed

            navigationManager.NavigateTo("/students");
        }
    }
</EditForm>
}

@code {
    [Parameter]
    public string BcitId { get; set; }

    Student[] students;
    string baseUrl = "http://localhost:3000/";
    Student s;
    bool studentFound = false;


    protected override async Task OnInitializedAsync()
    {
        await load();
        await ShowStudentToEdit(BcitId);

    }

    protected async Task load()
    {
        students = await httpClient.GetFromJsonAsync<Student[]>($"{baseUrl}api/students");
    }

    protected async Task ShowStudentToEdit(string id)
    {
        HttpResponseMessage response = await httpClient.GetAsync($"{baseUrl}api/students/{id}");
        if (response.IsSuccessStatusCode)
        {
            s = await httpClient.GetFromJsonAsync<Student>($"{baseUrl}api/students/{id}");
            student.BcitId = s.BcitId;
            student.FirstName = s.FirstName;
            student.LastName = s.LastName;
            student.MobileNumber = s.MobileNumber;
            student.EmailAddress = s.EmailAddress;
            student.CityOfResidence = s.CityOfResidence;
            student.Specialization = s.Specialization;
            studentFound = true;
        }
        else
        {
            navigationManager.NavigateTo("/students");
        }
    }

}